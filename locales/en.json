{
  "app": {
    "title": "MCPHub Dashboard",
    "error": "Error",
    "closeButton": "Close",
    "noServers": "No MCP servers available",
    "loading": "Loading...",
    "logout": "Logout",
    "profile": "Profile",
    "changePassword": "Change Password",
    "toggleSidebar": "Toggle Sidebar",
    "welcomeUser": "Welcome, {{username}}",
    "name": "MCPHub"
  },
  "about": {
    "title": "About",
    "versionInfo": "MCPHub Version: {{version}}",
    "newVersion": "New version available!",
    "currentVersion": "Current version",
    "newVersionAvailable": "New version {{version}} is available",
    "viewOnGitHub": "View on GitHub",
    "checkForUpdates": "Check for Updates",
    "checking": "Checking for updates..."
  },
  "profile": {
    "viewProfile": "View profile",
    "userCenter": "User Center"
  },
  "sponsor": {
    "label": "Sponsor",
    "title": "Support the Project",
    "rewardAlt": "Reward QR Code",
    "supportMessage": "Support the development of MCPHub by buying me a coffee!",
    "supportButton": "Support on Ko-fi"
  },
  "wechat": {
    "label": "WeChat",
    "title": "Connect via WeChat",
    "qrCodeAlt": "WeChat QR Code",
    "scanMessage": "Scan this QR code to connect with us on WeChat"
  },
  "discord": {
    "label": "Discord",
    "title": "Join our Discord server",
    "community": "Join our growing community on Discord for support, discussions, and updates!"
  },
  "theme": {
    "title": "Theme",
    "light": "Light",
    "dark": "Dark",
    "system": "System"
  },
  "auth": {
    "login": "Login",
    "loginTitle": "Login to MCPHub",
    "slogan": "The Unified Hub for MCP Servers",
    "subtitle": "Centralized management platform for Model Context Protocol servers. Organize, monitor, and scale multiple MCP servers with flexible routing strategies.",
    "username": "Username",
    "password": "Password",
    "loggingIn": "Logging in...",
    "emptyFields": "Username and password cannot be empty",
    "loginFailed": "Login failed, please check your username and password",
    "loginError": "An error occurred during login",
    "currentPassword": "Current Password",
    "newPassword": "New Password",
    "confirmPassword": "Confirm Password",
    "passwordsNotMatch": "New password and confirmation do not match",
    "changePasswordSuccess": "Password changed successfully",
    "changePasswordError": "Failed to change password",
    "changePassword": "Change Password",
    "passwordChanged": "Password changed successfully",
    "passwordChangeError": "Failed to change password",
    "defaultPasswordWarning": "Default Password Security Warning",
    "defaultPasswordMessage": "You are using the default password (admin123), which poses a security risk. Please change your password immediately to protect your account.",
    "goToSettings": "Go to Settings",
    "passwordStrengthError": "Password does not meet security requirements",
    "passwordMinLength": "Password must be at least 8 characters long",
    "passwordRequireLetter": "Password must contain at least one letter",
    "passwordRequireNumber": "Password must contain at least one number",
    "passwordRequireSpecial": "Password must contain at least one special character",
    "passwordStrengthHint": "Password must be at least 8 characters and contain letters, numbers, and special characters"
  },
  "server": {
    "addServer": "Add Server",
    "add": "Add",
    "edit": "Edit",
    "copy": "Copy",
    "delete": "Delete",
    "confirmDelete": "Are you sure you want to delete this server?",
    "deleteWarning": "Deleting server '{{name}}' will remove it and all its data. This action cannot be undone.",
    "status": "Status",
    "tools": "Tools",
    "prompts": "Prompts",
    "name": "Server Name",
    "url": "Server URL",
    "apiKey": "API Key",
    "save": "Save",
    "cancel": "Cancel",
    "invalidConfig": "Could not find configuration data for {{serverName}}",
    "addError": "Failed to add server",
    "editError": "Failed to edit server {{serverName}}",
    "deleteError": "Failed to delete server {{serverName}}",
    "updateError": "Failed to update server",
    "editTitle": "Edit Server: {{serverName}}",
    "type": "Server Type",
    "typeStdio": "STDIO",
    "typeSse": "SSE",
    "typeStreamableHttp": "Streamable HTTP",
    "typeOpenapi": "OpenAPI",
    "command": "Command",
    "arguments": "Arguments",
    "envVars": "Environment Variables",
    "headers": "HTTP Headers",
    "key": "key",
    "value": "value",
    "enabled": "Enabled",
    "enable": "Enable",
    "disable": "Disable",
    "requestOptions": "Connection Configuration",
    "timeout": "Request Timeout",
    "timeoutDescription": "Timeout for requests to the MCP server (ms)",
    "maxTotalTimeout": "Maximum Total Timeout",
    "maxTotalTimeoutDescription": "Maximum total timeout for requests sent to the MCP server (ms) (Use with progress notifications)",
    "resetTimeoutOnProgress": "Reset Timeout on Progress",
    "resetTimeoutOnProgressDescription": "Reset timeout on progress notifications",
    "remove": "Remove",
    "toggleError": "Failed to toggle server {{serverName}}",
    "alreadyExists": "Server {{serverName}} already exists",
    "invalidData": "Invalid server data provided",
    "notFound": "Server {{serverName}} not found",
    "namePlaceholder": "Enter server name",
    "urlPlaceholder": "Enter server URL",
    "commandPlaceholder": "Enter command",
    "argumentsPlaceholder": "Enter arguments",
    "errorDetails": "Error Details",
    "viewErrorDetails": "View error details",
    "copyConfig": "Copy Configuration",
    "confirmVariables": "Confirm Variable Configuration",
    "variablesDetected": "Variables detected in configuration. Please confirm these variables are properly configured:",
    "detectedVariables": "Detected Variables",
    "confirmVariablesMessage": "Please ensure these variables are properly defined in your runtime environment. Continue adding server?",
    "confirmAndAdd": "Confirm and Add",
    "openapi": {
      "inputMode": "Input Mode",
      "inputModeUrl": "Specification URL",
      "inputModeSchema": "JSON Schema",
      "specUrl": "OpenAPI Specification URL",
      "schema": "OpenAPI JSON Schema",
      "schemaHelp": "Paste your complete OpenAPI JSON schema here",
      "security": "Security Type",
      "securityNone": "None",
      "securityApiKey": "API Key",
      "securityHttp": "HTTP Authentication",
      "securityOAuth2": "OAuth 2.0",
      "securityOpenIdConnect": "OpenID Connect",
      "apiKeyConfig": "API Key Configuration",
      "apiKeyName": "Header/Parameter Name",
      "apiKeyIn": "Location",
      "apiKeyValue": "API Key Value",
      "httpAuthConfig": "HTTP Authentication Configuration",
      "httpScheme": "Authentication Scheme",
      "httpCredentials": "Credentials",
      "httpSchemeBasic": "Basic",
      "httpSchemeBearer": "Bearer",
      "httpSchemeDigest": "Digest",
      "oauth2Config": "OAuth 2.0 Configuration",
      "oauth2Token": "Access Token",
      "openIdConnectConfig": "OpenID Connect Configuration",
      "openIdConnectUrl": "Discovery URL",
      "openIdConnectToken": "ID Token",
      "apiKeyInHeader": "Header",
      "apiKeyInQuery": "Query",
      "apiKeyInCookie": "Cookie",
      "passthroughHeaders": "Passthrough Headers",
      "passthroughHeadersHelp": "Comma-separated list of header names to pass through from tool call requests to upstream OpenAPI endpoints (e.g., Authorization, X-API-Key)"
    },
    "oauth": {
      "sectionTitle": "OAuth Configuration",
      "sectionDescription": "Configure client credentials for OAuth-protected servers (optional).",
      "clientId": "Client ID",
      "clientSecret": "Client Secret",
      "authorizationEndpoint": "Authorization Endpoint",
      "tokenEndpoint": "Token Endpoint",
      "scopes": "Scopes",
      "scopesPlaceholder": "scope1 scope2",
      "resource": "Resource / Audience",
      "accessToken": "Access Token",
      "refreshToken": "Refresh Token"
    }
  },
  "status": {
    "online": "Online",
    "offline": "Offline",
    "connecting": "Connecting",
    "oauthRequired": "OAuth Required",
    "clickToAuthorize": "Click to authorize with OAuth",
    "oauthWindowOpened": "OAuth authorization window opened. Please complete the authorization."
  },
  "errors": {
    "general": "Something went wrong",
    "network": "Network connection error. Please check your internet connection",
    "serverConnection": "Unable to connect to the server. Please check if the server is running",
    "serverAdd": "Failed to add server. Please check the server status",
    "serverUpdate": "Failed to edit server {{serverName}}. Please check the server status",
    "serverFetch": "Failed to retrieve server data. Please try again later",
    "initialStartup": "The server might be starting up. Please wait a moment as this process can take some time on first launch...",
    "serverInstall": "Failed to install server",
    "failedToFetchSettings": "Failed to fetch settings",
    "failedToUpdateRouteConfig": "Failed to update route configuration",
    "failedToUpdateSmartRoutingConfig": "Failed to update smart routing configuration"
  },
  "common": {
    "processing": "Processing...",
    "save": "Save",
    "cancel": "Cancel",
    "back": "Back",
    "refresh": "Refresh",
    "create": "Create",
    "creating": "Creating...",
    "update": "Update",
    "updating": "Updating...",
    "submitting": "Submitting...",
    "delete": "Delete",
    "remove": "Remove",
    "copy": "Copy",
    "copyId": "Copy ID",
    "copyUrl": "Copy URL",
    "copyJson": "Copy JSON",
    "copySuccess": "Copied to clipboard",
    "copyFailed": "Copy failed",
    "copied": "Copied",
    "close": "Close",
    "confirm": "Confirm",
    "language": "Language",
    "true": "True",
    "false": "False",
    "dismiss": "Dismiss",
    "github": "GitHub",
    "wechat": "WeChat",
    "discord": "Discord",
    "required": "Required",
    "secret": "Secret",
    "default": "Default",
    "value": "Value",
    "type": "Type",
    "repeated": "Repeated",
    "valueHint": "Value Hint",
    "choices": "Choices"
  },
  "nav": {
    "dashboard": "Dashboard",
    "servers": "Servers",
    "groups": "Groups",
    "users": "Users",
    "settings": "Settings",
    "changePassword": "Change Password",
    "market": "Market",
    "cloud": "Cloud Market",
    "logs": "Logs"
  },
  "pages": {
    "dashboard": {
      "title": "Dashboard",
      "totalServers": "Total",
      "onlineServers": "Online",
      "offlineServers": "Offline",
      "connectingServers": "Connecting",
      "recentServers": "Recent Servers"
    },
    "servers": {
      "title": "Servers Management"
    },
    "groups": {
      "title": "Group Management"
    },
    "users": {
      "title": "User Management"
    },
    "settings": {
      "title": "Settings",
      "language": "Language",
      "account": "Account Settings",
      "password": "Change Password",
      "appearance": "Appearance",
      "routeConfig": "Security",
      "installConfig": "Installation",
      "smartRouting": "Smart Routing"
    },
    "market": {
      "title": "Market Hub - Local and Cloud Markets"
    },
    "logs": {
      "title": "System Logs"
    }
  },
  "logs": {
    "filters": "Filters",
    "search": "Search logs...",
    "autoScroll": "Auto-scroll",
    "clearLogs": "Clear logs",
    "loading": "Loading logs...",
    "noLogs": "No logs available.",
    "noMatch": "No logs match the current filters.",
    "mainProcess": "Main Process",
    "childProcess": "Child Process",
    "main": "Main",
    "child": "Child"
  },
  "groups": {
    "add": "Add",
    "addNew": "Add New Group",
    "edit": "Edit Group",
    "delete": "Delete",
    "confirmDelete": "Are you sure you want to delete this group?",
    "deleteWarning": "Deleting group '{{name}}' will remove it and all its server associations. This action cannot be undone.",
    "name": "Group Name",
    "namePlaceholder": "Enter group name",
    "nameRequired": "Group name is required",
    "description": "Description",
    "descriptionPlaceholder": "Enter group description (optional)",
    "createError": "Failed to create group",
    "updateError": "Failed to update group",
    "deleteError": "Failed to delete group",
    "serverAddError": "Failed to add server to group",
    "serverRemoveError": "Failed to remove server from group",
    "addServer": "Add Server to Group",
    "selectServer": "Select a server to add",
    "servers": "Servers in Group",
    "remove": "Remove",
    "noGroups": "No groups available. Create a new group to get started.",
    "noServers": "No servers in this group.",
    "noServerOptions": "No servers available",
    "serverCount": "{{count}} Servers",
    "toolSelection": "Tool Selection",
    "toolsSelected": "Selected",
    "allTools": "All",
    "selectedTools": "Selected tools",
    "selectAll": "Select All",
    "selectNone": "Select None",
    "configureTools": "Configure Tools"
  },
  "market": {
    "title": "Local Installation",
    "official": "Official",
    "by": "By",
    "unknown": "Unknown",
    "tools": "tools",
    "search": "Search",
    "searchPlaceholder": "Search for servers by name, category, or tags",
    "clearFilters": "Clear",
    "clearCategoryFilter": "",
    "clearTagFilter": "",
    "categories": "Categories",
    "tags": "Tags",
    "showTags": "Show tags",
    "hideTags": "Hide tags",
    "moreTags": "",
    "noServers": "No servers found matching your search",
    "backToList": "Back to list",
    "install": "Install",
    "installing": "Installing...",
    "installed": "Installed",
    "installServer": "Install Server: {{name}}",
    "installSuccess": "Server {{serverName}} installed successfully",
    "author": "Author",
    "license": "License",
    "repository": "Repository",
    "examples": "Examples",
    "arguments": "Arguments",
    "argumentName": "Name",
    "description": "Description",
    "required": "Required",
    "example": "Example",
    "viewSchema": "View schema",
    "fetchError": "Error fetching market servers",
    "serverNotFound": "Server not found",
    "searchError": "Error searching servers",
    "filterError": "Error filtering servers by category",
    "tagFilterError": "Error filtering servers by tag",
    "noInstallationMethod": "No installation method available for this server",
    "showing": "Showing {{from}}-{{to}} of {{total}} servers",
    "perPage": "Per page",
    "confirmVariablesMessage": "Please ensure these variables are properly defined in your runtime environment. Continue installing server?",
    "confirmAndInstall": "Confirm and Install"
  },
  "cloud": {
    "title": "Cloud Support",
    "subtitle": "Powered by MCPRouter",
    "by": "By",
    "server": "Server",
    "config": "Config",
    "created": "Created",
    "updated": "Updated",
    "available": "Available",
    "description": "Description",
    "details": "Details",
    "tools": "Tools",
    "tool": "tool",
    "toolsAvailable": "{{count}} tool available||{{count}} tools available",
    "loadingTools": "Loading tools...",
    "noTools": "No tools available for this server",
    "noDescription": "No description available",
    "viewDetails": "View Details",
    "parameters": "Parameters",
    "result": "Result",
    "error": "Error",
    "callTool": "Call",
    "calling": "Calling...",
    "toolCallSuccess": "Tool {{toolName}} executed successfully",
    "toolCallError": "Failed to call tool {{toolName}}: {{error}}",
    "viewSchema": "View Schema",
    "backToList": "Back to Cloud Market",
    "search": "Search",
    "searchPlaceholder": "Search cloud servers by name, title, or author",
    "clearFilters": "Clear Filters",
    "clearCategoryFilter": "Clear",
    "clearTagFilter": "Clear",
    "categories": "Categories",
    "tags": "Tags",
    "noCategories": "No categories found",
    "noTags": "No tags found",
    "noServers": "No cloud servers found",
    "fetchError": "Error fetching cloud servers",
    "serverNotFound": "Cloud server not found",
    "searchError": "Error searching cloud servers",
    "filterError": "Error filtering cloud servers by category",
    "tagFilterError": "Error filtering cloud servers by tag",
    "showing": "Showing {{from}}-{{to}} of {{total}} cloud servers",
    "perPage": "Per page",
    "apiKeyNotConfigured": "MCPRouter API key not configured",
    "apiKeyNotConfiguredDescription": "To use cloud servers, you need to configure your MCPRouter API key.",
    "getApiKey": "Get API Key",
    "configureInSettings": "Configure in Settings",
    "installServer": "Install {{name}}",
    "installSuccess": "Server {{name}} installed successfully",
    "installError": "Failed to install server: {{error}}"
  },
  "registry": {
    "title": "Registry",
    "official": "Official",
    "latest": "Latest",
    "description": "Description",
    "website": "Website",
    "repository": "Repository",
    "packages": "Packages",
    "package": "package",
    "remotes": "Remotes",
    "remote": "remote",
    "published": "Published",
    "updated": "Updated",
    "install": "Install",
    "installing": "Installing...",
    "installed": "Installed",
    "installServer": "Install {{name}}",
    "installSuccess": "Server {{name}} installed successfully",
    "installError": "Failed to install server: {{error}}",
    "noDescription": "No description available",
    "viewDetails": "View Details",
    "backToList": "Back to Registry",
    "search": "Search",
    "searchPlaceholder": "Search registry servers by name",
    "clearFilters": "Clear",
    "noServers": "No registry servers found",
    "fetchError": "Error fetching registry servers",
    "serverNotFound": "Registry server not found",
    "showing": "Showing {{from}}-{{to}} of {{total}} registry servers",
    "perPage": "Per page",
    "environmentVariables": "Environment Variables",
    "packageArguments": "Package Arguments",
    "runtimeArguments": "Runtime Arguments",
    "headers": "Headers"
  },
  "tool": {
    "run": "Run",
    "running": "Running...",
    "runTool": "Run Tool",
    "cancel": "Cancel",
    "noDescription": "No description available",
    "inputSchema": "Input Schema:",
    "runToolWithName": "Run Tool: {{name}}",
    "execution": "Tool Execution",
    "successful": "Successful",
    "failed": "Failed",
    "result": "Result:",
    "error": "Error",
    "errorDetails": "Error Details:",
    "noContent": "Tool executed successfully but returned no content.",
    "unknownError": "Unknown error occurred",
    "jsonResponse": "JSON Response:",
    "toolResult": "Tool result",
    "noParameters": "This tool does not require any parameters.",
    "selectOption": "Select an option",
    "enterValue": "Enter {{type}} value",
    "enabled": "Enabled",
    "enableSuccess": "Tool {{name}} enabled successfully",
    "disableSuccess": "Tool {{name}} disabled successfully",
    "toggleFailed": "Failed to toggle tool status",
    "parameters": "Tool Parameters",
    "formMode": "Form Mode",
    "jsonMode": "JSON Mode",
    "jsonConfiguration": "JSON Configuration",
    "invalidJsonFormat": "Invalid JSON format",
    "fixJsonBeforeSwitching": "Please fix JSON format before switching to form mode",
    "item": "Item {{index}}",
    "addItem": "Add {{key}} item",
    "enterKey": "Enter {{key}}"
  },
  "prompt": {
    "run": "Get",
    "running": "Getting...",
    "result": "Prompt Result",
    "error": "Prompt Error",
    "execution": "Prompt Execution",
    "successful": "Successful",
    "failed": "Failed",
    "errorDetails": "Error Details:",
    "noContent": "Prompt executed successfully but returned no content.",
    "unknownError": "Unknown error occurred",
    "jsonResponse": "JSON Response:",
    "description": "Description",
    "messages": "Messages",
    "noDescription": "No description available",
    "runPromptWithName": "Get Prompt: {{name}}"
  },
  "settings": {
    "enableGlobalRoute": "Enable Global Route",
    "enableGlobalRouteDescription": "Allow connections to /sse endpoint without specifying a group ID",
    "enableGroupNameRoute": "Enable Group Name Route",
    "enableGroupNameRouteDescription": "Allow connections to /sse endpoint using group names instead of just group IDs",
    "enableBearerAuth": "Enable Bearer Authentication",
    "enableBearerAuthDescription": "Require bearer token authentication for MCP requests",
    "bearerAuthKey": "Bearer Authentication Key",
    "bearerAuthKeyDescription": "The authentication key that will be required in the Bearer token",
    "bearerAuthKeyPlaceholder": "Enter bearer authentication key",
    "skipAuth": "Skip Authentication",
    "skipAuthDescription": "Bypass login requirement for frontend and API access (DEFAULT OFF for security)",
    "pythonIndexUrl": "Python Package Repository URL",
    "pythonIndexUrlDescription": "Set UV_DEFAULT_INDEX environment variable for Python package installation",
    "pythonIndexUrlPlaceholder": "e.g. https://pypi.org/simple",
    "npmRegistry": "NPM Registry URL",
    "npmRegistryDescription": "Set npm_config_registry environment variable for NPM package installation",
    "npmRegistryPlaceholder": "e.g. https://registry.npmjs.org/",
    "baseUrl": "Base URL",
    "baseUrlDescription": "Base URL for MCP requests",
    "baseUrlPlaceholder": "e.g. http://localhost:3000",
    "installConfig": "Installation",
    "systemConfigUpdated": "System configuration updated successfully",
    "enableSmartRouting": "Enable Smart Routing",
    "enableSmartRoutingDescription": "Enable smart routing feature to search the most suitable tool based on input (using $smart group name)",
    "dbUrl": "PostgreSQL URL (requires pgvector support)",
    "dbUrlPlaceholder": "e.g. postgresql://user:password@localhost:5432/dbname",
    "openaiApiBaseUrl": "OpenAI API Base URL",
    "openaiApiBaseUrlPlaceholder": "https://api.openai.com/v1",
    "openaiApiKey": "OpenAI API Key",
    "openaiApiKeyPlaceholder": "Enter OpenAI API key",
    "openaiApiEmbeddingModel": "OpenAI Embedding Model",
    "openaiApiEmbeddingModelPlaceholder": "text-embedding-3-small",
    "smartRoutingConfigUpdated": "Smart routing configuration updated successfully",
    "smartRoutingRequiredFields": "Database URL and OpenAI API Key are required to enable smart routing",
    "smartRoutingValidationError": "Please fill in the required fields before enabling Smart Routing: {{fields}}",
    "mcpRouterConfig": "Cloud Market",
    "mcpRouterApiKey": "MCPRouter API Key",
    "mcpRouterApiKeyDescription": "API key for accessing MCPRouter cloud market services",
    "mcpRouterApiKeyPlaceholder": "Enter MCPRouter API key",
    "mcpRouterReferer": "Referer",
    "mcpRouterRefererDescription": "Referer header for MCPRouter API requests",
    "mcpRouterRefererPlaceholder": "https://www.mcphubx.com",
    "mcpRouterTitle": "Title",
    "mcpRouterTitleDescription": "Title header for MCPRouter API requests",
    "mcpRouterTitlePlaceholder": "MCPHub",
    "mcpRouterBaseUrl": "Base URL",
    "mcpRouterBaseUrlDescription": "Base URL for MCPRouter API",
    "mcpRouterBaseUrlPlaceholder": "https://api.mcprouter.to/v1",
    "systemSettings": "System Settings",
    "nameSeparatorLabel": "Name Separator",
    "nameSeparatorDescription": "Character used to separate server name and tool/prompt name (default: -)",
    "restartRequired": "Configuration saved. It is recommended to restart the application to ensure all services load the new settings correctly.",
    "exportMcpSettings": "Export Settings",
    "mcpSettingsJson": "MCP Settings JSON",
    "mcpSettingsJsonDescription": "View, copy, or download your current mcp_settings.json configuration for backup or migration to other tools",
    "copyToClipboard": "Copy to Clipboard",
    "downloadJson": "Download JSON",
    "exportSuccess": "Settings exported successfully",
    "exportError": "Failed to fetch settings"
  },
  "dxt": {
    "upload": "Upload",
    "uploadTitle": "Upload DXT Extension",
    "dropFileHere": "Drop your .dxt file here",
    "orClickToSelect": "or click to select from your computer",
    "invalidFileType": "Please select a valid .dxt file",
    "noFileSelected": "Please select a .dxt file to upload",
    "uploading": "Uploading...",
    "uploadFailed": "Failed to upload DXT file",
    "installServer": "Install MCP Server from DXT",
    "extensionInfo": "Extension Information",
    "name": "Name",
    "version": "Version",
    "description": "Description",
    "author": "Author",
    "tools": "Tools",
    "serverName": "Server Name",
    "serverNamePlaceholder": "Enter a name for this server",
    "install": "Install",
    "installing": "Installing...",
    "installFailed": "Failed to install server from DXT",
    "serverExistsTitle": "Server Already Exists",
    "serverExistsConfirm": "Server '{{serverName}}' already exists. Do you want to override it with the new version?",
    "override": "Override"
  },
  "jsonImport": {
    "button": "Import",
    "title": "Import Servers from JSON",
    "inputLabel": "Server Configuration JSON",
    "inputHelp": "Paste your server configuration JSON. Supports STDIO, SSE, and HTTP (streamable-http) server types.",
    "preview": "Preview",
    "previewTitle": "Preview Servers to Import",
    "import": "Import",
    "importing": "Importing...",
    "invalidFormat": "Invalid JSON format. The JSON must contain an 'mcpServers' object.",
    "parseError": "Failed to parse JSON. Please check the format and try again.",
    "addFailed": "Failed to add server",
    "importFailed": "Failed to import servers",
    "partialSuccess": "Imported {{count}} of {{total}} servers successfully. Some servers failed:"
  },
  "users": {
    "add": "Add User",
    "addNew": "Add New User",
    "edit": "Edit User",
    "delete": "Delete User",
    "create": "Create User",
    "update": "Update User",
    "username": "Username",
    "password": "Password",
    "newPassword": "New Password",
    "confirmPassword": "Confirm Password",
    "adminRole": "Administrator",
    "admin": "Admin",
    "user": "User",
    "permissions": "Permissions",
    "adminPermissions": "Full system access",
    "userPermissions": "Limited access",
    "currentUser": "You",
    "noUsers": "No users found",
    "adminRequired": "Administrator access required to manage users",
    "usernameRequired": "Username is required",
    "passwordRequired": "Password is required",
    "passwordTooShort": "Password must be at least 6 characters long",
    "passwordMismatch": "Passwords do not match",
    "usernamePlaceholder": "Enter username",
    "passwordPlaceholder": "Enter password",
    "newPasswordPlaceholder": "Leave empty to keep current password",
    "confirmPasswordPlaceholder": "Confirm new password",
    "createError": "Failed to create user",
    "updateError": "Failed to update user",
    "deleteError": "Failed to delete user",
    "statsError": "Failed to fetch user statistics",
    "deleteConfirmation": "Are you sure you want to delete user '{{username}}'? This action cannot be undone.",
    "confirmDelete": "Delete User",
    "deleteWarning": "Are you sure you want to delete user '{{username}}'? This action cannot be undone."
  },
  "api": {
    "errors": {
      "readonly": "Readonly for demo environment",
      "invalid_credentials": "Invalid username or password",
      "serverNameRequired": "Server name is required",
      "serverConfigRequired": "Server configuration is required",
      "serverConfigInvalid": "Server configuration must include either a URL, OpenAPI specification URL or schema, or command with arguments",
      "serverTypeInvalid": "Server type must be one of: stdio, sse, streamable-http, openapi",
      "urlRequiredForType": "URL is required for {{type}} server type",
      "openapiSpecRequired": "OpenAPI specification URL or schema is required for openapi server type",
      "headersInvalidFormat": "Headers must be an object",
      "headersNotSupportedForStdio": "Headers are not supported for stdio server type",
      "serverNotFound": "Server not found",
      "failedToRemoveServer": "Server not found or failed to remove",
      "internalServerError": "Internal server error",
      "failedToGetServers": "Failed to get servers information",
      "failedToGetServerSettings": "Failed to get server settings",
      "failedToGetServerConfig": "Failed to get server configuration",
      "failedToSaveSettings": "Failed to save settings",
      "toolNameRequired": "Server name and tool name are required",
      "descriptionMustBeString": "Description must be a string",
      "groupIdRequired": "Group ID is required",
      "groupNameRequired": "Group name is required",
      "groupNotFound": "Group not found",
      "groupIdAndServerNameRequired": "Group ID and server name are required",
      "groupOrServerNotFound": "Group or server not found",
      "toolsMustBeAllOrArray": "Tools must be \"all\" or an array of strings",
      "serverNameAndToolNameRequired": "Server name and tool name are required",
      "usernameRequired": "Username is required",
      "userNotFound": "User not found",
      "failedToGetUsers": "Failed to get users information",
      "failedToGetUserInfo": "Failed to get user information",
      "failedToGetUserStats": "Failed to get user statistics",
      "marketServerNameRequired": "Server name is required",
      "marketServerNotFound": "Market server not found",
      "failedToGetMarketServers": "Failed to get market servers information",
      "failedToGetMarketServer": "Failed to get market server information",
      "failedToGetMarketCategories": "Failed to get market categories",
      "failedToGetMarketTags": "Failed to get market tags",
      "failedToSearchMarketServers": "Failed to search market servers",
      "failedToFilterMarketServers": "Failed to filter market servers",
      "failedToProcessDxtFile": "Failed to process DXT file"
    },
    "success": {
      "serverCreated": "Server created successfully",
      "serverUpdated": "Server updated successfully",
      "serverRemoved": "Server removed successfully",
      "serverToggled": "Server status toggled successfully",
      "toolToggled": "Tool {{name}} {{action}} successfully",
      "toolDescriptionUpdated": "Tool {{name}} description updated successfully",
      "systemConfigUpdated": "System configuration updated successfully",
      "groupCreated": "Group created successfully",
      "groupUpdated": "Group updated successfully",
      "groupDeleted": "Group deleted successfully",
      "serverAddedToGroup": "Server added to group successfully",
      "serverRemovedFromGroup": "Server removed from group successfully",
      "serverToolsUpdated": "Server tools updated successfully"
    }
  },
  "oauthCallback": {
    "authorizationFailed": "Authorization Failed",
    "authorizationFailedError": "Error",
    "authorizationFailedDetails": "Details",
    "invalidRequest": "Invalid Request",
    "missingStateParameter": "Missing required OAuth state parameter.",
    "missingCodeParameter": "Missing required authorization code parameter.",
    "serverNotFound": "Server Not Found",
    "serverNotFoundMessage": "Could not find server associated with this authorization request.",
    "sessionExpiredMessage": "The authorization session may have expired. Please try authorizing again.",
    "authorizationSuccessful": "Authorization Successful",
    "server": "Server",
    "status": "Status",
    "connected": "Connected",
    "successMessage": "The server has been successfully authorized and connected.",
    "autoCloseMessage": "This window will close automatically in 3 seconds...",
    "closeNow": "Close Now",
    "connectionError": "Connection Error",
    "connectionErrorMessage": "Authorization was successful, but failed to connect to the server.",
    "reconnectMessage": "Please try reconnecting from the dashboard.",
    "configurationError": "Configuration Error",
    "configurationErrorMessage": "Server transport does not support OAuth finishAuth(). Please ensure the server is configured with streamable-http transport.",
    "internalError": "Internal Error",
    "internalErrorMessage": "An unexpected error occurred while processing the OAuth callback.",
    "closeWindow": "Close Window"
  }
}